name: 週次進捗レポート生成
on:
  schedule:
    - cron: '0 9 * * FRI'  # 毎週金曜日9:00 JST
  workflow_dispatch:  # 手動実行も可能

permissions:
  issues: read
  pull-requests: read
  contents: write
  pages: write
  id-token: write

jobs:
  generate-weekly-report:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          npm install @octokit/rest @octokit/auth-github-app
          npm install moment chart.js puppeteer
          
      - name: Collect GitHub Data
        id: collect-data
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          node << 'EOF'
          const { Octokit } = require("@octokit/rest");
          const moment = require('moment');
          
          const octokit = new Octokit({
            auth: process.env.GITHUB_TOKEN,
          });
          
          const owner = process.env.REPO_OWNER;
          const repo = process.env.REPO_NAME;
          
          async function generateWeeklyReport() {
            const weekStart = moment().subtract(7, 'days').format('YYYY-MM-DD');
            const weekEnd = moment().format('YYYY-MM-DD');
            
            console.log(`📊 週次レポート生成: ${weekStart} 〜 ${weekEnd}`);
            
            // Issues データ収集
            const { data: issues } = await octokit.rest.issues.listForRepo({
              owner,
              repo,
              state: 'all',
              since: `${weekStart}T00:00:00Z`,
              per_page: 100
            });
            
            // Pull Requests データ収集
            const { data: pullRequests } = await octokit.rest.pulls.list({
              owner,
              repo,
              state: 'all',
              per_page: 100
            });
            
            // Project データ収集（Projects v2 API使用）
            const query = `
              query($owner: String!, $repo: String!) {
                repository(owner: $owner, name: $repo) {
                  projectsV2(first: 10) {
                    nodes {
                      id
                      title
                      items(first: 100) {
                        nodes {
                          id
                          fieldValues(first: 20) {
                            nodes {
                              ... on ProjectV2ItemFieldTextValue {
                                text
                                field {
                                  ... on ProjectV2Field {
                                    name
                                  }
                                }
                              }
                              ... on ProjectV2ItemFieldSingleSelectValue {
                                name
                                field {
                                  ... on ProjectV2SingleSelectField {
                                    name
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            const projectData = await octokit.graphql(query, { owner, repo });
            
            // 進捗データ分析
            const weeklyIssues = issues.filter(issue => {
              const createdDate = moment(issue.created_at);
              return createdDate.isAfter(weekStart) && createdDate.isBefore(weekEnd);
            });
            
            const closedIssues = issues.filter(issue => {
              if (!issue.closed_at) return false;
              const closedDate = moment(issue.closed_at);
              return closedDate.isAfter(weekStart) && closedDate.isBefore(weekEnd);
            });
            
            const weeklyPRs = pullRequests.filter(pr => {
              const createdDate = moment(pr.created_at);
              return createdDate.isAfter(weekStart) && createdDate.isBefore(weekEnd);
            });
            
            const mergedPRs = pullRequests.filter(pr => {
              if (!pr.merged_at) return false;
              const mergedDate = moment(pr.merged_at);
              return mergedDate.isAfter(weekStart) && mergedDate.isBefore(weekEnd);
            });
            
            // 機能別進捗分析
            const functionProgress = {};
            issues.forEach(issue => {
              const labels = issue.labels.map(label => label.name);
              const component = labels.find(label => 
                ['frontend', 'backend', 'database', 'ui-ux', 'infrastructure'].includes(label)
              ) || 'other';
              
              if (!functionProgress[component]) {
                functionProgress[component] = {
                  total: 0,
                  completed: 0,
                  inProgress: 0,
                  backlog: 0
                };
              }
              
              functionProgress[component].total++;
              
              if (issue.state === 'closed') {
                functionProgress[component].completed++;
              } else if (labels.includes('in-progress')) {
                functionProgress[component].inProgress++;
              } else {
                functionProgress[component].backlog++;
              }
            });
            
            // レポートデータ作成
            const reportData = {
              reportDate: moment().format('YYYY-MM-DD'),
              period: `${weekStart} 〜 ${weekEnd}`,
              summary: {
                totalIssues: issues.length,
                weeklyNewIssues: weeklyIssues.length,
                weeklyClosedIssues: closedIssues.length,
                totalPRs: pullRequests.length,
                weeklyNewPRs: weeklyPRs.length,
                weeklyMergedPRs: mergedPRs.length,
                completionRate: issues.length > 0 ? Math.round((closedIssues.length / issues.length) * 100) : 0
              },
              functionProgress,
              projectData: projectData.repository.projectsV2.nodes
            };
            
            // JSON形式で出力
            console.log('REPORT_DATA=' + JSON.stringify(reportData));
            
            // HTMLレポート生成
            const htmlReport = generateHTMLReport(reportData);
            require('fs').writeFileSync('weekly-report.html', htmlReport);
            
            // Markdown レポート生成
            const markdownReport = generateMarkdownReport(reportData);
            require('fs').writeFileSync('weekly-report.md', markdownReport);
            
            console.log('✅ 週次レポート生成完了');
          }
          
          function generateHTMLReport(data) {
            return `
<!DOCTYPE html>
<html>
<head>
    <title>週次進捗レポート - ${data.period}</title>
    <meta charset="UTF-8">
    <style>
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 40px; background-color: #f6f8fa; }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
        .header { text-align: center; border-bottom: 2px solid #e1e4e8; padding-bottom: 20px; margin-bottom: 30px; }
        .summary-cards { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px; }
        .card { background: #f6f8fa; padding: 20px; border-radius: 8px; text-align: center; border-left: 4px solid #0366d6; }
        .card h3 { margin: 0 0 10px 0; color: #24292e; }
        .card .value { font-size: 2em; font-weight: bold; color: #0366d6; }
        .progress-section { margin: 30px 0; }
        .progress-bar { background: #e1e4e8; height: 20px; border-radius: 10px; overflow: hidden; margin: 10px 0; }
        .progress-fill { height: 100%; background: #28a745; transition: width 0.3s ease; }
        table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        th, td { padding: 12px; text-align: left; border-bottom: 1px solid #e1e4e8; }
        th { background-color: #f6f8fa; font-weight: 600; }
        .status-badge { padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: bold; }
        .status-completed { background: #d4edda; color: #155724; }
        .status-progress { background: #fff3cd; color: #856404; }
        .status-backlog { background: #f8d7da; color: #721c24; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🚀 週次進捗レポート</h1>
            <h2>${data.period}</h2>
            <p>生成日: ${data.reportDate}</p>
        </div>
        
        <div class="summary-cards">
            <div class="card">
                <h3>📋 総Issue数</h3>
                <div class="value">${data.summary.totalIssues}</div>
            </div>
            <div class="card">
                <h3>📝 今週新規Issue</h3>
                <div class="value">${data.summary.weeklyNewIssues}</div>
            </div>
            <div class="card">
                <h3>✅ 今週完了Issue</h3>
                <div class="value">${data.summary.weeklyClosedIssues}</div>
            </div>
            <div class="card">
                <h3>📈 完了率</h3>
                <div class="value">${data.summary.completionRate}%</div>
            </div>
            <div class="card">
                <h3>🔄 総PR数</h3>
                <div class="value">${data.summary.totalPRs}</div>
            </div>
            <div class="card">
                <h3>🚀 今週マージ</h3>
                <div class="value">${data.summary.weeklyMergedPRs}</div>
            </div>
        </div>
        
        <div class="progress-section">
            <h2>📊 機能別進捗状況</h2>
            <table>
                <thead>
                    <tr>
                        <th>コンポーネント</th>
                        <th>総数</th>
                        <th>完了</th>
                        <th>進行中</th>
                        <th>未着手</th>
                        <th>進捗率</th>
                        <th>進捗バー</th>
                    </tr>
                </thead>
                <tbody>
                    ${Object.entries(data.functionProgress).map(([component, progress]) => `
                    <tr>
                        <td><strong>${component}</strong></td>
                        <td>${progress.total}</td>
                        <td><span class="status-badge status-completed">${progress.completed}</span></td>
                        <td><span class="status-badge status-progress">${progress.inProgress}</span></td>
                        <td><span class="status-badge status-backlog">${progress.backlog}</span></td>
                        <td>${Math.round((progress.completed / progress.total) * 100)}%</td>
                        <td>
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: ${(progress.completed / progress.total) * 100}%"></div>
                            </div>
                        </td>
                    </tr>
                    `).join('')}
                </tbody>
            </table>
        </div>
        
        <div class="footer">
            <p><em>📅 次回レポート生成予定: ${moment().add(7, 'days').format('YYYY-MM-DD')}</em></p>
            <p>🔗 <a href="https://github.com/${process.env.REPO_OWNER}/${process.env.REPO_NAME}">GitHubリポジトリ</a></p>
        </div>
    </div>
</body>
</html>
            `;
          }
          
          function generateMarkdownReport(data) {
            return `# 📊 週次進捗レポート - ${data.period}

## 📈 サマリー
- **総Issue数**: ${data.summary.totalIssues}
- **今週新規Issue**: ${data.summary.weeklyNewIssues}  
- **今週完了Issue**: ${data.summary.weeklyClosedIssues}
- **完了率**: ${data.summary.completionRate}%
- **総PR数**: ${data.summary.totalPRs}
- **今週マージPR**: ${data.summary.weeklyMergedPRs}

## 🔧 機能別進捗

| コンポーネント | 総数 | 完了 | 進行中 | 未着手 | 進捗率 |
|---|---|---|---|---|---|
${Object.entries(data.functionProgress).map(([component, progress]) => 
`| ${component} | ${progress.total} | ${progress.completed} | ${progress.inProgress} | ${progress.backlog} | ${Math.round((progress.completed / progress.total) * 100)}% |`
).join('\n')}

## 📅 次週の予定
- 次回レポート生成: ${moment().add(7, 'days').format('YYYY-MM-DD')}
- 継続監視項目の確認
- 新規課題への対応

---
*生成日: ${data.reportDate}*
            `;
          }
          
          generateWeeklyReport().catch(console.error);
          EOF
          
      - name: Create GitHub Issue for Weekly Report
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue create \
            --title "📊 週次進捗レポート $(date +'%Y-%m-%d')" \
            --body-file weekly-report.md \
            --label "weekly-report,automated" \
            --assignee "${{ github.actor }}"
            
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./
          destination_dir: reports/weekly
          
      - name: Notify Slack
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ -n "$SLACK_WEBHOOK_URL" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"📊 週次進捗レポートが生成されました: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|詳細を確認>"}' \
              $SLACK_WEBHOOK_URL
          fi
